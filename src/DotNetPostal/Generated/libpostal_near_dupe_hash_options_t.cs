//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


internal class libpostal_near_dupe_hash_options_t : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal libpostal_near_dupe_hash_options_t(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(libpostal_near_dupe_hash_options_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~libpostal_near_dupe_hash_options_t() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibPostalPINVOKE.delete_libpostal_near_dupe_hash_options_t(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool with_name {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_name_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_name_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_address {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_address_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_address_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_unit {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_unit_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_unit_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_city_or_equivalent {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_city_or_equivalent_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_city_or_equivalent_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_small_containing_boundaries {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_small_containing_boundaries_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_small_containing_boundaries_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_postal_code {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_postal_code_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_postal_code_get(swigCPtr);
      return ret;
    } 
  }

  public bool with_latlon {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_latlon_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_with_latlon_get(swigCPtr);
      return ret;
    } 
  }

  public double latitude {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_latitude_set(swigCPtr, value);
    } 
    get {
      double ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_latitude_get(swigCPtr);
      return ret;
    } 
  }

  public double longitude {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_longitude_set(swigCPtr, value);
    } 
    get {
      double ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_longitude_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t geohash_precision {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_geohash_precision_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (LibPostalPINVOKE.SWIGPendingException.Pending) throw LibPostalPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_geohash_precision_get(swigCPtr), true);
      if (LibPostalPINVOKE.SWIGPendingException.Pending) throw LibPostalPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool name_and_address_keys {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_name_and_address_keys_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_name_and_address_keys_get(swigCPtr);
      return ret;
    } 
  }

  public bool name_only_keys {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_name_only_keys_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_name_only_keys_get(swigCPtr);
      return ret;
    } 
  }

  public bool address_only_keys {
    set {
      LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_address_only_keys_set(swigCPtr, value);
    } 
    get {
      bool ret = LibPostalPINVOKE.libpostal_near_dupe_hash_options_t_address_only_keys_get(swigCPtr);
      return ret;
    } 
  }

  public libpostal_near_dupe_hash_options_t() : this(LibPostalPINVOKE.new_libpostal_near_dupe_hash_options_t(), true) {
  }

}
